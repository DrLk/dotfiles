" Vundle config

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" Theme
Plugin 'ghifarit53/tokyonight-vim'
Plugin 'folke/tokyonight.nvim'

" Clipboard under wayland
Plugin 'jasonccox/vim-wayland-clipboard'

" Highlight log
Plugin 'mtdl9/vim-log-highlighting'

" Highlight C/C++
" Plugin 'bfrg/vim-cpp-modern'
" Plugin 'octol/vim-cpp-enhanced-highlight'

"From here other plugins from the original Vundle config
" Plugin 'wincent/command-t.git'
Plugin 'scrooloose/nerdtree'
"Plugin 'skammer/vim-css-color'
"Plugin 'hail2u/vim-css3-syntax'
"Plugin 'groenewege/vim-less'
"Plugin 'jelera/vim-javascript-syntax'
"Plugin 'cakebaker/scss-syntax.vim'
"Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/syntastic'

" Status line
Plugin 'nvim-lualine/lualine.nvim'
Plugin 'nvim-tree/nvim-web-devicons'

" Telescope
Plugin 'nvim-lua/plenary.nvim'
Plugin 'nvim-telescope/telescope.nvim'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" End of Vundle config

" General
set number  " Show line numbers
set wrap  " Wrap lines
set linebreak " Break lines at word (requires Wrap lines)
"set showbreak=+++ " Wrap-broken line prefix
set textwidth=100 " Line wrap (number of cols)
set showmatch " Highlight matching brace
set visualbell  " Use visual bell (no beeping)

set hlsearch  " Highlight all search results
set smartcase " Enable smart-case search
set ignorecase  " Always case-insensitive
set incsearch " Searches for strings incrementally

set autoindent  " Auto-indent new lines
set expandtab " Use spaces instead of tabs
set shiftwidth=4  " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab  " Enable smart-tabs
set softtabstop=4 " Number of spaces per Tab

" Config by jeremy
nmap <F6> :NERDTreeToggle<CR>
" set cursorline

" Advanced
set ruler " Show row and column ruler information

set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour


" Generated by VimConfig.com

set mouse=a " activate mouse

" Autoload NERDTree if no file specified

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Auto close NERDTree if no more files

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Show hidden files in NERDTree

let NERDTreeShowHidden=1

syntax on

" enable copy to clipboard

set clipboard=unnamed

" copy to clipboard with Ctrl-C
map <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" paste from clipboard with Ctrl-V
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>

" Clipboard functionality (paste from system)
vnoremap  <leader>y "+y
nnoremap  <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p

" NeoVim Lua
let g:CommandTPreferredImplementation='lua'

"""""""""""""""""""""""""""
" Git-gutter configuration
"""""""""""""""""""""""""""

let g:gitgutter_updatetime = 750
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

"""""""""""""""""""""""""""
" Syntastic configuration
"""""""""""""""""""""""""""

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" so that syntastic uses .jshintrc files if present - http://stackoverflow.com/questions/28573553/how-can-i-make-syntastic-load-a-different-checker-based-on-existance-of-files-in

autocmd FileType javascript let b:syntastic_checkers = findfile('.jshintrc', '.;') != '' ? ['jshint'] : ['standard']

"""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""
lua require('lualine').setup()


"""""""""""""""""""""""""""
" Telescope
"""""""""""""""""""""""""""

" Using Lua functions
nnoremap <C-p>      <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>



"""""""""""""""""""""""""""
" Custom (no plugin related)
"""""""""""""""""""""""""""

" show filename
set statusline+=%F

" Uncomment the following to have Vim jump to the last position when
" reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Theme
if has('nvim')
  colorscheme tokyonight-night
else
  set termguicolors

  let g:tokyonight_style = 'night' " available: night, storm
  let g:tokyonight_enable_italic = 1

  colorscheme tokyonight
endif

" Cursor shape
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Cyrillic mapping
set langmap=йЙцЦуУкКеЕнНгГшШщЩзЗхХъЪфФыЫвВаАпПрРоОлЛдДжЖэЭяЯчЧсСмМиИтТьЬбБюЮ.\\,;qQwWeErRtTyYuUiIoOpP[{]}aAsSdDfFgGhHjJkKlL;:'\"zZxXcCvVbBnNmM\\,<.>/?

" Fold
setlocal foldmethod=syntax
set nofoldenable

let g:cpp_class_decl_highlight = 1
let g:cpp_member_variable_highlight = 1

" FindText
command -nargs=1 FindText lvimgrep /<args>/ % | lopen | on | res | set filetype=log
nmap <C-/> :FindText<space>

command -nargs=0 ResizeMainWindow exec 'resize ' . (&lines-26)

autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>:ResizeMainWindow<CR>
autocmd BufReadPost quickfix nnoremap <buffer> <c-CR> <CR>:on<CR>:res<CR>

command -nargs=0 OpenFindTextFullScreen lopen | on | set filetype=log
command -nargs=0 OpenFindTextWindow lopen 23 | set filetype=log

nnoremap <A-n> :OpenFindTextFullScreen<CR>
nnoremap <C-n> :OpenFindTextWindow<CR>
